#!/usr/bin/env php
<?php

require __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/vendor/leafo/scssphp/scss.inc.php';

$files = new Illuminate\Filesystem\Filesystem();

$tracker = new JasonLewis\ResourceWatcher\Tracker();

use Leafo\ScssPhp\Compiler;

$watcher = new JasonLewis\ResourceWatcher\Watcher($tracker, $files);

$listener = $watcher->watch('./server/Public/style/');

function endsWith($haystack, $needle)
{
    return substr_compare($haystack, $needle, -strlen($needle)) === 0;
}

function compileSass($path)
{
    $array        = explode(DIRECTORY_SEPARATOR, $path);
    $fileName     = $array[count($array) - 1];
    $cssDirectory = __DIR__ . DIRECTORY_SEPARATOR . 'server' . DIRECTORY_SEPARATOR . 'Public' . DIRECTORY_SEPARATOR . 'css' .
        DIRECTORY_SEPARATOR;
    $scss         = new Compiler();
    $scss->setFormatter('Leafo\ScssPhp\Formatter\Crunched');
    $scss->setSourceMap(Compiler::SOURCE_MAP_FILE);
    $scss->setSourceMapOptions([
        'sourceMapWriteTo'  => $cssDirectory . str_replace('.scss', '.min.css.map', $fileName),
        'sourceMapURL'      => str_replace('.scss', '.min.css.map', $fileName),
        'sourceMapFilename' => str_replace('.scss', '.min.css.map', $fileName),
        'sourceMapBasepath' => $cssDirectory,
    ]);
    file_put_contents($cssDirectory . str_replace('.scss', '.min.css', $fileName), $scss->compile(file_get_contents
    ($path)));
    echo "{$path} was compiled to " . $cssDirectory . str_replace('.scss', '.min.css', $fileName) . ' with ' .
        $cssDirectory .
        str_replace('.scss',
            '.min.css.map', $fileName) . PHP_EOL;
}

$listener->onAnything(function ($event, $resource, $path)
{
    switch ($event->getCode()) {
        case JasonLewis\ResourceWatcher\Event::RESOURCE_DELETED:
            $array          = explode(DIRECTORY_SEPARATOR, $path);
            $fileName       = $array[count($array) - 1];
            $cssDirectory = __DIR__ . DIRECTORY_SEPARATOR . 'server' . DIRECTORY_SEPARATOR . 'Public' .
                DIRECTORY_SEPARATOR .
                'css' . DIRECTORY_SEPARATOR;
            $cssFilePath    = $cssDirectory . str_replace('.scss', '.min.css', $fileName);
            $cssMapFilePath = $cssDirectory . str_replace('.scss', '.min.css.map', $fileName);
            if (endsWith($path, 'scss')) {
                echo "{$path} was deleted." . PHP_EOL;
                if (file_exists($cssFilePath)) {
                    unlink($cssFilePath);
                    echo "{$cssFilePath} was deleted." . PHP_EOL;
                }
                if (file_exists($cssMapFilePath)) {
                    unlink($cssMapFilePath);
                    echo "{$cssMapFilePath} was deleted." . PHP_EOL;
                }
            }
            break;
        case JasonLewis\ResourceWatcher\Event::RESOURCE_MODIFIED:
            if (endsWith($path, 'scss')) {
                echo "{$path} was modified." . PHP_EOL;
                compileSass($path);
            }
            break;
        case JasonLewis\ResourceWatcher\Event::RESOURCE_CREATED:
            if (endsWith($path, 'scss')) {
                echo "{$path} was created." . PHP_EOL;
                compileSass($path);
            }
            break;
    }
});

$watcher->start();
